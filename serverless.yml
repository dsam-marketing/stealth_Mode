service: stealth

# frameworkVersion: "2"

useDotenv: true

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: false #non-linux
  stage: ${opt:stage, self:provider.stage}
  memSize:
    dev: 128
    alpha: 128
    prod: 128

provider:
  name: aws
  runtime: python3.8
  logRetentionInDays: 30
  stage: dev
  region: us-east-1
  memorySize: ${self:custom.memSize.${self:custom.stage}}
  profile: stealth
  environment:
    STAGE: ${self:custom.stage}

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "*"

functions:
  Analyze:
    handler: handler.analyze
    package: {}
    # timeout: 10
    environment:
      SENDER: ${ssm:SENDER}
      BUCKET:
        Ref: StealthBucket
      ATTACHMENT_BUCKET:
        Ref: StealthAttachmentBucket

# you can add CloudFormation resource templates here
resources:
  Resources:
    StealthBucket:
      Type: AWS::S3::Bucket
      Properties:
        # BucketName: Stealth
        # Set the CORS policy
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    StealthAttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "stealth-attachments"
    PublicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StealthAttachmentBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - !Join ["/", [!GetAtt [StealthAttachmentBucket, Arn], "*"]]
              Principal: "*"
    SESBucketPermission:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StealthBucket
        PolicyDocument:
          Statement:
            - Principal:
                Service: "ses.amazonaws.com"
              Action:
                - s3:PutObject
              Effect: Allow
              Sid: "AllowSESPuts"
              Resource:
                Fn::Join:
                  ["", ["arn:aws:s3:::", !Ref StealthBucket, "/*"]]
              Condition:
                StringEquals:
                  "aws:Referer": { Ref: AWS::AccountId }
    SESLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref AnalyzeLambdaFunction
        Principal: ses.amazonaws.com
        SourceAccount: !Ref AWS::AccountId
    SESRuleSet:
      Type: AWS::SES::ReceiptRuleSet
      Properties:
        RuleSetName: analyze-rule-set
    SESRule:
      DependsOn: SESRuleSet
      Type: AWS::SES::ReceiptRule
      Properties:
        RuleSetName: !Ref SESRuleSet
        Rule:
          Enabled: true
          Name: analyze-rule
          Recipients:
            - ${ssm:RECIPIENT}
          Actions:
            - S3Action:
                BucketName: !Ref StealthBucket
            - LambdaAction:
                FunctionArn: !GetAtt AnalyzeLambdaFunction.Arn
                InvocationType: Event
    MasterTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          - AttributeName: date
            KeyType: HASH
          - AttributeName: score
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: date
            AttributeType: S
          - AttributeName: score
            AttributeType: S
        TableName: Master-${self:custom.stage}
        BillingMode: PAY_PER_REQUEST
  Outputs:
    SESRule:
      Value:
        Ref: SESRule
    StealthBucketArn:
      Value:
        Fn::GetAtt:
          - StealthBucket
          - Arn
      Export:
        Name: StealthBucketArn-${self:custom.stage}
    StealthBucketName:
      Value:
        Ref: StealthBucket
      Export:
        Name: StealthBucketName-${self:custom.stage}
